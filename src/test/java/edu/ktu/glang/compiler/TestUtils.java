package edu.ktu.glang.compiler;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;

public class TestUtils {
    static String executeCode(String sourceCode) throws IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {
        byte[] bytecode = GLangCompiler.compileCode(sourceCode);

        // Load the generated bytecode as a class
        ClassLoader classLoader = new URLClassLoader(new URL[0]);
        Class<?> clazz = new ByteClassLoader(classLoader, bytecode).loadClass("compiled.Main");

        // Run the class's main method and capture its output
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        PrintStream originalOut = System.out;
        System.setOut(new PrintStream(byteArrayOutputStream));

        Method mainMethod = clazz.getMethod("main", String[].class);
        String[] mainArgs = new String[0];
        mainMethod.invoke(null, (Object) mainArgs);

        System.setOut(originalOut);
        return byteArrayOutputStream.toString();
    }

    private static class ByteClassLoader extends ClassLoader {
        private final byte[] bytecode;

        public ByteClassLoader(ClassLoader parent, byte[] bytecode) {
            super(parent);
            this.bytecode = bytecode;
        }

        @Override
        protected Class<?> findClass(String name) throws ClassNotFoundException {
            return defineClass(name, bytecode, 0, bytecode.length);
        }
    }
}
